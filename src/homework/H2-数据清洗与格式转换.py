###############################################
# 作业2: 数据清洗与格式转换
#
# 本次作业将练习数据清洗和格式转换的操作。通过这些练习，你将掌握如何对原始数据进行预处理，
# 使其更适合后续的分析工作。
###############################################

###############################################
# 1. 导入必要的库
#
# 首先，我们需要导入pandas库和datetime库，用于数据处理和日期时间操作。
###############################################

# 导入pandas库和datetime库
# 在此处完成代码


###############################################
# 2. 读取数据文件
#
# 同样，我们需要读取`data\猫鸭账单_2025年.csv`文件，并将其存储在变量`df`中。
###############################################

# 读取CSV文件
# 在此处完成代码


###############################################
# 3. 查看数据基本信息
#
# 在开始数据清洗之前，让我们先查看DataFrame的基本信息。
###############################################

# 查看DataFrame的基本信息
# 在此处完成代码


###############################################
# 4. 清洗"流水"列
#
# 从上面的信息中可以看到，"流水"列是一个object类型，但实际上它应该是一个数值类型。
# 我们需要清洗这列数据，将其转换成数值类型。
#
# 首先，让我们看一下"流水"列的前几个值，了解其格式。
###############################################

# 查看"流水"列的前几个值
# 在此处完成代码


###############################################
# 现在，我们需要编写一个函数来清洗"流水"列。这个函数应该能够：
# 1. 移除人民币符号¥
# 2. 移除千位分隔符,
# 3. 将结果转换为浮点数
#
# 然后，我们将使用`apply`方法将这个函数应用到"流水"列上。
###############################################

# 编写清洗"流水"列的函数
# 在此处完成代码
def format_flow(value):
    # 移除人民币符号、千位分隔符，并转换为浮点数
    # 提示：使用replace()方法和strip()方法，最后使用float()函数转换
    
    return # 返回处理后的值

# 将函数应用到"流水"列上
# 在此处完成代码


# 再次查看DataFrame的基本信息
# 在此处完成代码


###############################################
# 5. 清洗和转换"日期"列
#
# 接下来，我们需要将"日期"列从字符串类型转换为日期时间类型，这样我们才能进行日期相关的操作。
#
# 首先，让我们看一下"日期"列的前几个值，了解其格式。
###############################################

# 查看"日期"列的前几个值
# 在此处完成代码


# 将"日期"列转换为日期时间类型
# 在此处完成代码


# 再次查看DataFrame的基本信息
# 在此处完成代码


###############################################
# 6. 提取月份信息
#
# 现在，我们可以从"日期"列中提取更多有用的信息。首先，让我们从"日期"列中提取月份信息，
# 并更新"月份"列。
#
# 当日期列被转换为datetime64类型后，我们可以使用`.dt.month`属性来提取月份。
###############################################

# 从"日期"列提取月份信息，并更新"月份"列
# 在此处完成代码


###############################################
# 7. 提取星期信息
#
# 接下来，让我们从"日期"列中提取星期信息，并创建一个新列"星期"。
#
# 我们可以使用`.dt.dayofweek`属性来提取星期信息，这将返回0-6的数字（0表示星期一，6表示星期日）。
# 然后我们可以将这些数字映射到对应的星期名称。
###############################################

# 从"日期"列提取星期信息，并创建一个新列"星期"
# 在此处完成代码
# 提示：使用df['日期'].dt.dayofweek提取星期数值，然后使用字典或列表映射到星期名称


###############################################
# 8. 计算每条记录的日期间隔
#
# 现在，让我们计算每条记录与前一条记录之间的日期间隔（以天为单位），并创建一个新列"间隔"。
#
# 我们可以使用`diff()`方法来计算相邻日期之间的差异，这将返回一个时间差对象，
# 然后我们可以使用`.dt.days`属性来获取天数。
###############################################

# 计算每条记录与前一条记录之间的日期间隔，并创建一个新列"间隔"
# 在此处完成代码
# 提示：使用df['日期'].diff()计算日期差，然后使用.dt.days提取天数


###############################################
# 9. 统一"分类"列的值
#
# 在数据清洗中，经常需要处理不一致的分类值。假设我们想要将"分类"列中的一些值进行合并：
# - 将"零食"合并到"饮食"分类中
# - 将"水果"合并到"饮食"分类中
#
# 首先，让我们看一下"分类"列中的唯一值。
###############################################

# 查看"分类"列中的唯一值
# 在此处完成代码


# 修改"分类"列，将"零食"和"水果"合并到"饮食"分类中
# 在此处完成代码
# 提示：可以使用df.loc条件修改或者使用replace方法


# 再次查看"分类"列中的唯一值
# 在此处完成代码


###############################################
# 10. 新增支出占比列
#
# 为了便于分析，我们想要计算每一笔支出占总支出的百分比，并创建一个新列"支出占比"。
#
# 注意，我们只对"支出"类型的记录进行这个计算，对于"收入"类型的记录，这个值应该为NaN。
###############################################

# 计算每一笔支出占总支出的百分比，并创建一个新列"支出占比"
# 在此处完成代码
# 提示：先计算支出总额，然后对每条支出记录计算占比


###############################################
# 11. 处理异常值
#
# 在数据分析中，异常值可能会显著影响结果。让我们尝试识别并处理"金额"列中的异常值。
#
# 首先，我们可以使用箱线图来可视化"金额"列的分布，并尝试识别异常值。
# 为此，我们需要导入matplotlib库。
###############################################

# 导入matplotlib库
import matplotlib.pyplot as plt

# 设置中文显示
import matplotlib as mpl
mpl.rcParams['font.sans-serif'] = ['SimHei']
mpl.rcParams['axes.unicode_minus'] = False

# 绘制"金额"列的箱线图
# 在此处完成代码
# 提示：使用plt.boxplot()函数


###############################################
# 根据箱线图，我们可以看到"金额"列中有一些异常值。让我们尝试使用统计方法来识别这些异常值。
#
# 一种常用的方法是使用四分位距（IQR）来识别异常值：如果一个值大于Q3 + 1.5 * IQR或小于Q1 - 1.5 * IQR，
# 那么它被认为是一个异常值。
###############################################

# 使用四分位距（IQR）方法识别"金额"列中的异常值
# 在此处完成代码
# 提示：使用df['金额'].quantile()计算四分位数，然后使用公式识别异常值


# 创建一个新列"是否异常"，用来标记异常值
# 在此处完成代码


###############################################
# 12. 填充缺失值（模拟练习）
#
# 在实际的数据清洗中，我们经常需要处理缺失值。虽然我们的数据集中可能没有缺失值，
# 但让我们模拟一个场景：假设我们不小心删除了一些"金额"列的值，现在需要填充这些缺失值。
#
# 首先，让我们随机删除一些"金额"列的值。
###############################################

# 导入numpy库
import numpy as np

# 创建一个数据集的副本，以免影响原始数据
df_copy = df.copy()

# 随机删除一些"金额"列的值
np.random.seed(42)  # 设置随机种子，确保结果可重现
mask = np.random.random(len(df_copy)) < 0.1  # 随机生成一个布尔掩码，约10%的值为True
df_copy.loc[mask, '金额'] = np.nan  # 将掩码为True的位置的值设为NaN

# 查看包含缺失值的数据集
df_copy.info()

###############################################
# 现在，让我们尝试使用不同的方法来填充这些缺失值：
# 1. 使用固定值填充（如0）
# 2. 使用列的均值填充
# 3. 使用列的中位数填充
# 4. 使用前向填充（用前一个有效值填充）
# 5. 使用后向填充（用后一个有效值填充）
###############################################

# 使用固定值0填充缺失值
# 在此处完成代码
df_fill_zero = df_copy.copy()


# 使用列的均值填充缺失值
# 在此处完成代码
df_fill_mean = df_copy.copy()


# 使用列的中位数填充缺失值
# 在此处完成代码
df_fill_median = df_copy.copy()


# 使用前向填充
# 在此处完成代码
df_fill_ffill = df_copy.copy()


# 使用后向填充
# 在此处完成代码
df_fill_bfill = df_copy.copy()


###############################################
# 完成！
#
# 恭喜你完成了第二次作业！通过这次作业，你应该已经掌握了如何对原始数据进行清洗和格式转换，
# 包括处理异常值、填充缺失值、提取有用信息等。这些都是数据预处理的重要技能，
# 将为后续的数据分析打下坚实的基础。
############################################### 